r = require("rstats")
var out = console.r.call("rnorm", {n: 4})
out
out.length
console.r.call("my_func", {{A: 2, B: 3}})
console.r.call("my_func", [{A: 2, B: 3}])
var obj = {A: 2, B: 3}
obj
console.log(obj)
JSON.stringify(obj)
console.r.call("my_func", obj)
console.r.call("my_func", {A: obj})
console.r.call("my_func", {obj: obj})
console.r.call("graphqlr:::build_js_file_location")
console.r.call("graphqlr:::build_js_file_location", {})
obj = {A: "hi", B: "hello"}
console.r.call("my_func",
{obj: obj})
var testQuery = "\n    query HeroNameQuery {\n      hero {\n        name\n      }\n    }\n  ";
testQuery
var result = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
var res;
return regeneratorRuntime.wrap(function _callee$(_context) {
while (1) {
switch (_context.prev = _context.next) {
case 0:
_context.next = 2;
return query_fn(testQuery);
case 2:
res = _context.sent;
console.log("Yey, story successfully loaded!");
return _context.abrupt("return", res);
var result = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {    var res;    return regeneratorRuntime.wrap(function _callee$(_context) {      while (1) {        switch (_context.prev = _context.next) {          case 0:            _context.next = 2;            return query_fn(testQuery);         case 2:            res = _context.sent;            console.log("Yey, story successfully loaded!");            return _context.abrupt("return", res);          case 5:          case "end":            return _context.stop();        }      }    }, _callee, this);  }))();
var a = run_test_query()
a
a.then(function(res){console.log(res.data)})
a.res
var keys = []; for (key in a){keys.push(a)}; keys
var keys = []; for (key in a){keys.push(key)}; keys
a._d
var keys = []; for (key in a._d){keys.push(key)}; keys
res
res.then(function(a, b){console.log(a,b)})
res.done()
res
var keys = []; for (key in res) {keys.push(key)}; JSON.stringify(keys)
var keys = []; for (key in res._d) {keys.push(key)}; JSON.stringify(keys)
run_test_query()
window.gql_test()
window.gql_test_async()
gql_test_fn()
gql_test_fn()
